{"version":3,"sources":["components/ContestantTab.jsx","components/Card.jsx","components/VoteCount.jsx","components/VoterTab.jsx","components/App.js","serviceWorker.js","index.js"],"names":["ContestantTab","_ref","account","contracts","_useState","useState","_useState2","Object","slicedToArray","name","setName","_useState3","_useState4","party","setParty","addContestant","_ref2","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","methods","toUpperCase","send","from","gas","catch","err","console","log","events","ContestantAdded","on","event","window","alert","returnValues","id","toString","stop","apply","this","arguments","react_default","createElement","className","type","onChange","e","target","value","placeholder","onClick","Card","votes","address","VoteCount","hash","contestants","setContestants","ids","setIds","cleanUp","arra","set","Set","toConsumableArray","filter","elem","map","parseInt","encrypt","Date","now","getEvents","Promise","resolve","reject","ContestantDetails","encryption","push","length","sortedContestants","slice","sort","b","disabled","style","height","obj","i","components_Card","key","adress","onKeyPress","preventDefault","val","concat","cleanIds","getVoteeDetails","count","then","res","rej","VoterTab","setId","exists","setExists","_useState5","_useState6","voted","setVoted","vote","Voted","registerVoter","Registered","VoterState","useEffect","getVotedState","App","setContracts","accounts","setAccounts","voteTab","setVoteTab","loadBlockChainData","web3","netId","_accounts","contract","ethereum","createAlchemyWeb3","enable","eth","net","getId","sent","getAccounts","Contract","Booth","abi","networks","t0","components_VoterTab","components_ContestantTab","components_VoteCount","Boolean","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5ac9f4aa.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst ContestantTab=({account, contracts})=>{\r\n    const [name,setName]=useState('')\r\n    const [party,setParty]=useState('')\r\n    const addContestant=async()=>{        \r\n        contracts&&account&&contracts.methods.addContestant(name.toUpperCase(),party.toUpperCase())\r\n            .send({from:account,gas:3000000})\r\n            .catch((err)=>console.log(err))\r\n        setName('')\r\n        setParty('')\r\n        contracts&&contracts.events.ContestantAdded({})\r\n            .on('data',event=>window.alert(event.returnValues.id.toString()));\r\n    }\r\n    return(\r\n        <div className='container-fluid d-flex flex-column justify-content-around h-100'>\r\n            \r\n            <input \r\n            type=\"text\" \r\n            className=\"form-control\" \r\n            onChange={(e)=>setName(e.target.value)} \r\n            placeholder=\"NAME\"\r\n            value={name}/>\r\n            <input \r\n            type=\"text\" \r\n            className=\"form-control\" \r\n            onChange={(e)=>setParty(e.target.value)} \r\n            placeholder=\"PARTY\"\r\n            value={party}/>\r\n            <button onClick={()=>contracts&&addContestant()} type=\"button\" className=\"btn btn-primary align-self-center\">ADD</button>\r\n        </div>\r\n    )\r\n}\r\nexport default ContestantTab;","import React from \"react\";\r\n\r\nconst Card=({name,party,votes,address,id})=>{\r\n    return(\r\n        <div className=\"card\">\r\n            <div className=\"card-body\">\r\n                <p className=\"card-title font-weight-bold\">\r\n                    Name: {name}\r\n                </p>\r\n                <p className=\"card-text font-weight-bold\">\r\n                    Party: {party}\r\n                </p>\r\n                <p className=\"card-text font-weight-normal\">\r\n                    Votes: {votes}\r\n                </p>\r\n                <p className=\"card-text font-italic\">\r\n                    Address: {address}\r\n                </p>\r\n                <p className=\"card-text font-weight-light\">\r\n                    Id: {id}\r\n                </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Card;\r\n\r\n\r\n","import React, { useState } from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst VoteCount=({account,contracts})=>{\r\n    const [contestants, setContestants]=useState([])\r\n    const [ids,setIds]=useState([])\r\n    let hash\r\n    const count=(e)=>{\r\n        e.preventDefault();\r\n        let cleanIds=cleanUp(ids)\r\n        hash=encrypt()\r\n        for(let i=0;i<cleanIds.length;i++){\r\n            contracts.methods.getVoteeDetails(cleanIds[i],hash).send({from:account})\r\n        }\r\n    }\r\n    const cleanUp=(arra)=>{\r\n        const set=new Set(arra)\r\n        const arr=[...set]\r\n        return arr.filter(\r\n            (elem)=>elem!=='').map(\r\n                (elem)=>parseInt(elem))\r\n    }\r\n    const appendNumber=(e)=>{\r\n        if(e.key==='Enter'){\r\n            e.preventDefault();\r\n            let val=e.target.value\r\n            setIds([...ids,val])\r\n            e.target.value=''\r\n        }\r\n    }\r\n    const encrypt=()=>account.toString()+Date.now().toString()\r\n    \r\n    const getEvents=new Promise((resolve,reject)=>{\r\n        let events=[]\r\n        try{\r\n            contracts&&contracts.events.ContestantDetails({filter:{encryption:hash}})\r\n                .on('data',event=>{\r\n                    events.push(event)\r\n                    events.length==cleanUp(ids).length&&resolve(events)\r\n                })\r\n        }catch(err){\r\n            reject('Error Occurred')\r\n        }\r\n    })\r\n    const assignValue=()=>{\r\n        getEvents.then(\r\n            (res)=>{\r\n                setContestants(res.map((elem)=>elem.returnValues))\r\n            },\r\n            (rej)=>{\r\n                console.log(rej)\r\n            })\r\n    }\r\n    const sort=()=>{\r\n        let sortedContestants=contestants.slice(0).sort((a,b)=>parseInt(b.votes.toString())-parseInt(a.votes.toString()))\r\n        setContestants(sortedContestants)\r\n    }\r\n    return(\r\n        <div className='container-fluid d-flex flex-column justify-content-around h-100'>\r\n            <p>\r\n                Be Informed that counting the votes will take time and eth.\r\n            </p>\r\n            <button onClick={sort} type=\"button\" className={`btn btn-secondary align-self-center`} disabled={!contestants.length}>SORT</button>\r\n            <div className='overflow-auto mh-50'style={{'height':'200px'}}>\r\n                {contestants.map((obj,i)=>{\r\n                    return <Card\r\n                    key={i} \r\n                    name={obj.name}\r\n                    party={obj.party}\r\n                    votes={obj.votes.toString()}\r\n                    address={obj.adress}\r\n                    id={obj.id.toString()}/>\r\n                    })\r\n                    }\r\n            </div>\r\n            <input \r\n            type=\"number\" \r\n            className=\"form-control\"\r\n            onKeyPress={appendNumber}\r\n            placeholder='Enter ContestantID'\r\n            />\r\n            <button onClick={(e)=>{contracts&&account&&count(e);assignValue()}} type=\"button\" className={`btn btn-primary align-self-center`} disabled={!ids.length}>COUNT</button>\r\n        </div>\r\n    )\r\n}\r\nexport default VoteCount","import React, { useEffect, useState } from \"react\";\r\n\r\nconst VoterTab=({account,contracts})=>{\r\n    const [id,setId]=useState(0)\r\n    const [exists,setExists]=useState(false)\r\n    const [voted,setVoted]=useState(false)\r\n    const vote=(id)=>{\r\n        contracts.methods.vote(id)\r\n            .send({from:account})\r\n            .catch((err)=>console.log(err))\r\n       \r\n        contracts.events.Voted({})\r\n            .on('data',event=>console.log(event.returnValues));\r\n    }\r\n    const registerVoter=()=>{\r\n        contracts.methods.registerVoter()\r\n            .send({from:account})\r\n            .catch((err)=>console.log(err))\r\n\r\n        contracts.events.Registered({})\r\n            .on('data',event=>console.log(event.returnValues));\r\n    }\r\n    contracts&&contracts.events.VoterState({})\r\n        .on('data',event=>{\r\n            setExists(event.returnValues.exists)\r\n            setVoted(event.returnValues.voted)\r\n        }\r\n    )\r\n    useEffect(()=>{\r\n        contracts&&account&&contracts.methods.getVotedState().send({from:account})\r\n    },[registerVoter,vote])   \r\n\r\n    return(\r\n        <div className='container-fluid d-flex flex-column justify-content-around h-100'>\r\n            <button onClick={()=>contracts&&account&&registerVoter()} type=\"button\" className={`btn text-primary align-self-end`} disabled={exists}>Register as voter</button>\r\n            <input \r\n            type=\"number\" \r\n            className=\"form-control\" \r\n            onChange={(e)=>setId(e.target.value)} \r\n            placeholder='Enter ContestantID'\r\n            disabled={voted}/>\r\n            <button onClick={()=>contracts&&account&&vote(id)} type=\"button\" className={`btn btn-primary align-self-center`} disabled={voted||!exists}>VOTE</button>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VoterTab;\r\n","import React, { useEffect, useState } from 'react';\r\nimport Web3 from 'web3';\r\nimport Booth from '../abis/Booth.json';\r\nimport './App.css';\r\nimport ContestantTab from './ContestantTab';\r\nimport VoteCount from './VoteCount';\r\nimport VoterTab from './VoterTab';\r\nimport {createAlchemyWeb3} from \"@alch/alchemy-web3\";\r\n\r\nconst App=()=> {\r\n  const [contracts,setContracts]=useState('')\r\n  const [accounts,setAccounts]=useState('')\r\n  const [voteTab,setVoteTab]=useState(1)\r\n\r\n  const loadBlockChainData=async()=>{\r\n    if(typeof window.ethereum!=='undefined'){\r\n      // const web3 = await new Web3(new Web3.providers.WebsocketProvider('ws://localhost:7545'))\r\n      const url = `wss://rinkeby.infura.io/ws/v3/5a5069b4ad6f4c38afe55f29fe40b91e`;\r\n\r\n// Using WebSockets\r\n      const web3 = createAlchemyWeb3(url);\r\n      // Using web3js\r\n      // const web3 = new Web3(new Web3.providers.WebsocketProvider(url));\r\n      await window.ethereum.enable();\r\n      const netId=await web3.eth.net.getId();\r\n      const accounts=await web3.eth.getAccounts();\r\n      console.log(accounts)\r\n      if(typeof accounts[0] !=='undefined'){\r\n        setAccounts(accounts);\r\n        // console.log(accounts);\r\n        // console.log(netId);\r\n      }else{\r\n        window.alert('Please login with metamask')\r\n      }\r\n      try{\r\n        let contract=await new web3.eth.Contract(Booth.abi,Booth.networks[netId].address);\r\n        setContracts(contract)\r\n      }catch(err){\r\n        window.alert(\"Unable to load Contracts\")\r\n      }\r\n    }else{\r\n      window.alert('Please Install Metamask')\r\n    }\r\n  }\r\n  const setTab=(e)=>{\r\n    e.preventDefault();\r\n    setVoteTab(1)\r\n  }\r\n  const setContestantTab=(e)=>{\r\n    e.preventDefault();\r\n    setVoteTab(2)\r\n  }\r\n  const setVoteCountTab=(e)=>{\r\n    e.preventDefault();\r\n    setVoteTab(3)\r\n  }\r\n  useEffect(()=>{\r\n    loadBlockChainData()\r\n  },[])\r\n  return (\r\n    <div className='row full-height'>\r\n\r\n    <div className={`container col-md-8 d-flex flex-column justify-content-between shadow-lg mb-5 bg-white rounded h-${voteTab==3?'100':'50'}`}>\r\n      <nav className='navbar row'>\r\n        <button onClick={setTab} type=\"button\" className={`btn col-4 ${voteTab==1&&'text-primary'}`}>VOTE</button>\r\n        <button onClick={setContestantTab} type=\"button\" className={`btn col-4 ${voteTab==2&&'text-primary'}`}>ADD CONTESTANT</button>\r\n        <button onClick={setVoteCountTab} type=\"button\" className={`btn col-4 ${voteTab==3&&'text-primary'}`}>COUNT VOTES</button>\r\n      </nav>\r\n      <div className='h-100'>\r\n        {\r\n          (voteTab==1)&&<VoterTab account={accounts[0]} contracts={contracts}/>\r\n        }\r\n        {\r\n          (voteTab==2)&&<ContestantTab account={accounts[0]} contracts={contracts}/>\r\n        }\r\n        {\r\n          (voteTab==3)&&<VoteCount account={accounts[0]} contracts={contracts}/>\r\n        }\r\n      </div>\r\n    </div>\r\n    </div>\r\n    \r\n  );\r\n  \r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}